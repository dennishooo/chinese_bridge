basePath: /api/v1
definitions:
  dto.AuthResponse:
    properties:
      access_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      expires_in:
        example: 3600
        type: integer
      refresh_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      token_type:
        example: Bearer
        type: string
      user:
        $ref: '#/definitions/dto.UserInfo'
    type: object
  dto.ErrorResponse:
    properties:
      code:
        example: VALIDATION_ERROR
        type: string
      details:
        example: Field 'code' is required
        type: string
      message:
        example: Invalid request parameters
        type: string
      trace_id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
    type: object
  dto.GoogleOAuthRequest:
    properties:
      code:
        example: 4/0AX4XfWjYZ...
        type: string
      state:
        example: random_state_string
        type: string
    required:
    - code
    type: object
  dto.MessageResponse:
    properties:
      message:
        example: Operation successful
        type: string
    type: object
  dto.RefreshTokenRequest:
    properties:
      refresh_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    required:
    - refresh_token
    type: object
  dto.TokenResponse:
    properties:
      access_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      expires_in:
        example: 3600
        type: integer
      token_type:
        example: Bearer
        type: string
    type: object
  dto.UserInfo:
    properties:
      avatar:
        example: https://lh3.googleusercontent.com/...
        type: string
      email:
        example: user@example.com
        type: string
      google_id:
        example: "1234567890"
        type: string
      id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      name:
        example: John Doe
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: Authentication service for Chinese Bridge card game platform
  title: Chinese Bridge Auth Service API
  version: "1.0"
paths:
  /auth/google:
    post:
      consumes:
      - application/json
      description: Handle Google OAuth callback and authenticate user
      parameters:
      - description: OAuth callback data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.GoogleOAuthRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.AuthResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Google OAuth callback
      tags:
      - authentication
  /auth/google/url:
    get:
      consumes:
      - application/json
      description: Get the Google OAuth authorization URL for login
      parameters:
      - description: OAuth state parameter
        in: query
        name: state
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get Google OAuth URL
      tags:
      - authentication
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Logout user and invalidate all sessions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Logout user
      tags:
      - authentication
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Refresh an expired JWT token using refresh token
      parameters:
      - description: Refresh token data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.TokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Refresh JWT token
      tags:
      - authentication
  /health:
    get:
      description: Check if the auth service is healthy
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Health check
      tags:
      - health
  /ready:
    get:
      description: Check if the auth service is ready to serve requests
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Ready check
      tags:
      - health
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
